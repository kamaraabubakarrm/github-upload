import moment from 'moment'
import { isNil } from 'lodash'
import { ProcessingError, ProcessingErrorCode } from './exceptions'
import { CaseCountsDatum } from '../types/Param.types'

// These are the columns we got from currently exported files.
// They my not be present in the user results.
enum ImportFileDataColumn {
  Time = 'time',
  Cases = 'cases',
  Deaths = 'deaths',
  Hospitalized = 'hospitalized',
  ICU = 'icu',
  Recovered = 'recovered',
}

function formatData(rawData: string): number | null {
  const parsed: number | null = isNil(rawData) ? null : +rawData?.trim()

  if (parsed !== null && Number.isNaN(parsed)) {
    throw new ProcessingError(ProcessingErrorCode.InvalidField, rawData)
  }

  return parsed
}

// TODO needs tests
/**
 * Build a {UserResult} from the raw file data.
 * @param rawUserResult Result of the parsed CSV file, containing an array of objects representing each row, with headers as keys.
 *    This is typically the format generated by Papa.parse with option 'headers' enabled.
 */
export function processImportedData(rawUserResult: Record<ImportFileDataColumn, string>[]): CaseCountsDatum[] {
  const data: CaseCountsDatum[] = []

  for (const row of rawUserResult) {
    if (!row.time) {
      if (process.env.NODE_ENV !== 'production') {
        console.warn('Time field missing in row, skipping.', row)
      }
    } else {
      const rowTime = moment(row.time)

      if (!rowTime.isValid()) {
        throw new ProcessingError(ProcessingErrorCode.InvalidField, row.time)
      }

      data.push({
        time: rowTime.toDate(),
        cases: formatData(row.cases),
        deaths: formatData(row.deaths),
        hospitalized: formatData(row.hospitalized),
        icu: formatData(row.icu),
        recovered: formatData(row.recovered),
      })
    }
  }

  return data
}
